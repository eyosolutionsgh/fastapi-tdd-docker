name: Continuous Integration and Delivery

on: [push]

env:
  IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/summarizer

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.FASTAPI_TDD_TOKEN }}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./project/Dockerfile.prod \
            "./project"
      - name: Push image
        run: |
          docker push ${{ env.IMAGE }}:latest

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.FASTAPI_TDD_TOKEN }}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./project/Dockerfile.prod \
            "./project"
      - name: Run container
        run: |
          docker run \
            -d \
            --name fastapi-tdd \
            -e PORT=8765 \
            -e ENVIRONMENT=dev \
            -e DATABASE_URL=sqlite://sqlite.db \
            -e DATABASE_TEST_URL=sqlite://sqlite.db \
            -p 5003:8765 \
            ${{ env.IMAGE }}:latest
      - name: Wait for the container to be ready
        run: |
          sleep 20 # Adjust the sleep time as needed
      - name: Install dependencies and run NLTK downloader
        run: |
          docker exec fastapi-tdd mkdir -p /usr/local/lib/nltk_data
          docker exec fastapi-tdd chmod -R 777 /usr/local/lib/nltk_data
          docker exec fastapi-tdd python -m nltk.downloader -d /usr/local/lib/nltk_data punkt
      - name: Pytest
        run: docker exec fastapi-tdd python -m pytest .
      - name: Flake8
        run: docker exec fastapi-tdd python -m flake8 .
      - name: Black
        run: docker exec fastapi-tdd python -m black . --check
      - name: isort
        run: docker exec fastapi-tdd python -m isort . --check-only

  deploy:
    name: Deploy to DigitalOCean
    runs-on: ubuntu-latest
    needs: [build, test]
    env:
      DO_APP_NAME: fastapi-tdd
      DO_REGISTRY_IMAGE: registry.digitalocean.com/datrix-registry/${DO_APP_NAME}/summarizer
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
          --cache-from ${{ env.IMAGE }}:latest \
          --tag ${{ env.DO_REGISTRY_IMAGE }}:latest \
          --file ./project/Dockerfile.prod \
          "./project"
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_AUTH_TOKEN }}
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      - name: Push to the registry
        run: docker push ${{ env.DO_REGISTRY_IMAGE }}
      - name: Set environment variables
        run: |
          echo "DO_REGISTRY_IMAGE=${{ env.DO_REGISTRY_IMAGE }}" >> $GITHUB_ENV
          echo "DO_AUTH_TOKEN=${{ secrets.DO_AUTH_TOKEN }}" >> $GITHUB_ENV
